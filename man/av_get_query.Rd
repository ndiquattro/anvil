% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/av_get_query.R
\name{av_get_query}
\alias{av_get_query}
\title{Get results of a SQL query}
\usage{
av_get_query(query, collect = FALSE, con = getOption("anvil.con"))
}
\arguments{
\item{query}{Character. A valid SQL statement.}

\item{collect}{Boolean. Automatically load results into memory.}

\item{con}{Object. Database connection to use. Defaults to most recent call
of \code{\link[=av_connect]{av_connect()}}.}
}
\value{
A tbl.
}
\description{
Executes a SQL statement provided as a character string on Athena.
}
\details{
The query string is processed through \code{\link[dplyr:tbl]{dplyr::tbl()}}. This means it
initially returns a tibble-like preview of the query. To get the full results
you must call \code{\link[dplyr:compute]{dplyr::collect()}} on the results, which will bring the data
into memory as a tibble. At this point the data could be converted to another
tabular data structure, if desired.
}
\examples{
apps <- av_get_query("SELECT * FROM data.appends")

# You need to quote correctly
samps <- av_get_query('SELECT alloy_id FROM "data-science".match_sample')

# You can integrate with other dplyr functions
av_get_query('SELECT * FROM "rds-export-graphite".graphite_address') \%>\%
  dplyr::filter(state == "CA")

# Pulling results and converting
av_get_query("SELECT * FROM data.appends") \%>\%
  dplyr::collect() \%>\%
  as.data.frame()

# Auto collect
res <- av_get_query("SELECT * FROM data.appends LIMIT 10", collect = TRUE)
}
\seealso{
Other get data functions: 
\code{\link{av_async_collect}()},
\code{\link{av_get_result}()},
\code{\link{av_get_status}()},
\code{\link{av_get_table}()}
}
\author{
Nicholas DiQuattro \email{nicholas@alloy.us}
}
\concept{get data functions}
